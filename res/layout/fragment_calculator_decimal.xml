<!-- This is the layout for the BinaryCalculator's Base-10 view. -->

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/fragment_calculator_decimal_linearLayout"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/Black"
    android:orientation="vertical"
    > 


    <!-- TextView to hold the computed value -->
    <TextView
        android:id="@+id/fragment_calculator_decimal_computedTextView"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_margin="3dp"
        android:layout_weight="2"
        android:background="@color/MediumGoldenRod"
        android:gravity="center"
        android:text="0"
        android:textSize="50dp" />
 <!-- We want to use dp so that text will be the same regardless of users settings -->


    <!--
         TextView to hold what is being added in, this is the working textView. When the user hits "=" we will pass what 
    	is in this "workingTextView" up to the "computedTextView." (after doing the arithmetic of course)
    -->
    <TextView
        android:id="@+id/fragment_calculator_decimal_workingTextView"
        android:layout_width="match_parent"
        android:layout_height="0dp"
 		android:layout_margin="3dp"
        android:layout_weight="1"
        android:background="#555555"
        android:gravity="center"
        android:maxLines="2"
        android:textColor="#cccccc"
        android:textSize="20dp" />
    
<!--
         Ok, so we have two textViews stacked vertically on top each other, now we need to start creating rows of 
    	buttons for the numbers and operators that the binary calculator will contain. We will do this by using a
    	TableLayout, which is a good layout for creating rows.
    -->        
	<TableLayout 
    	android:id="@+id/fragment_calculator_decimal_tableLayout"
    	android:layout_width="match_parent"
    	android:layout_height="0dp"
    	android:background="@color/Black"
    	android:layout_weight="10"
    	android:stretchColumns="*"> <!-- The star ensures that all the columns will be the same width -->
    	
    	<!--
      		**This is how not to make a lot of very similar Buttons.**
      
      <Button
        	android:id="@+id/fragment_remote_control_zeroButton"
        	android:layout_width="0dp"
        	android:layout_height="match_parent"
        	android:text="0"/> 
        	
        	**Instead we will create our buttons in the styles.xml in your res/values/styles.xml file.**
        -->
        <!--
         Since we are creating a lot of buttons that are very similar in appearence we are going to use some advanced layout trickery.
		We are going to use Styles to simplify the repetitive process of adding in buttons.
        -->
        
        <!-- Here we are including all of the button rows. We did this by creating a layout xml with references to our button 
        styles to signify a row of buttons. The layout file inherits from the TableRow layout. -->
		<include
            android:layout_weight="1"
            layout="@layout/button_row_first" />
    	<!-- include all button layouts we just made -->
    	<include
            android:layout_weight="1"
            layout="@layout/button_row" />
   
		<include 
		    android:layout_weight="1"
		    layout = "@layout/button_row"
		/>
		<include 
		    android:layout_weight="1"
		    layout = "@layout/button_row"
		/>
		<include 
		    android:layout_weight="1"
		    layout = "@layout/button_row_last"
		/>
		</TableLayout>
       
</LinearLayout>